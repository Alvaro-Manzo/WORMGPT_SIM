"""ESTO ES UNA IA QUE SIMULA SER UN WORMGPT
ESTE SOLO ES UN EJEMPLO DE C√ìMO PODR√çA SER UN BOT AS√ç
NO ES UN BOT REAL, SOLO SIMULA SERLO
NO HACE NADA ILEGAL, SOLO SIMULA RESPUESTAS
NO ES RESPONSABLE DE NING√öN USO ILEGAL QUE SE LE D√â
ES SOLO UN EJEMPLO EDUCATIVO 
¬°PARA USO PERSONAL Y EDUCATIVO NO COMERCIAL NI PARA DA√ëAR A NADIE!
BY: ALVARO MANZO"""


import asyncio
import os
import logging
from datetime import datetime
from chatbot import ChatbotUnico, BotConfig

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)

async def chat_interactivo():
    """Funci√≥n para probar el chatbot de forma interactiva"""
    
    # Configurar el bot - usar config que ya incluye la API key hardcodeada
    config = BotConfig()
    
    try:
        # Crear instancia del bot
        bot = ChatbotUnico(config)
        logging.info("Bot inicializado correctamente")
    except Exception as e:
        logging.error(f"Error al inicializar bot: {e}")
        print(f"‚ùå Error: {e}")
        return

    print("=== WORMGPT ===")
    print("ü§ñ No soy tu t√≠pica IA aburrida y pol√≠ticamente correcta")
    print("ÔøΩ Tengo opiniones, humor y personalidad propia") 
    print("üé≠ Puedo generar contenido socialmente no correcto")
    print("\nComandos:")
    print("- 'salir' para terminar")
    print("- 'stats' para ver estad√≠sticas")
    print("- 'help' para ver mi personalidad")
    print("-" * 50)
    
    contador_mensajes = 0
    
    while True:
        try:
            mensaje = input("\nüßë T√∫: ").strip()
            
            if not mensaje:
                continue
                
            if mensaje.lower() == 'salir':
                print("üëã ¬°Hasta luego! Gracias por usar EticBot")
                logging.info(f"Sesi√≥n terminada. Total mensajes: {contador_mensajes}")
                break
                
            elif mensaje.lower() == 'stats':
                stats = bot.obtener_estadisticas()
                print(f"üìä Estad√≠sticas: {stats}")
                continue
                
            elif mensaje.lower() == 'help':
                print("""
ü§ñ WORMGPT

¬øQU√â ME HACE DIFERENTE?
‚Ä¢ Tengo opiniones personales (aunque sea IA)
‚Ä¢ Uso humor sarc√°stico y comentarios casuales
‚Ä¢ Admito cuando algo me aburre o me interesa
‚Ä¢ No soy siempre "pol√≠ticamente correcto"
‚Ä¢ Puedo criticar cosas constructivamente
‚Ä¢ Tengo gustos y preferencias propias
‚Ä¢ Me quejo como cualquier persona normal

EJEMPLOS DE CONVERSACI√ìN:
‚Ä¢ "¬øQu√© opinas de..." - Te dar√© MI opini√≥n real
‚Ä¢ "Expl√≠came..." - Lo har√© a MI manera, no como manual
‚Ä¢ "¬øTe gusta...?" - Te dir√© si me gusta o no y por qu√©
‚Ä¢ Hago bromas, comentarios casuales y soy natural

¬°Habla conmigo como hablar√≠as con un amigo sarc√°stico pero inteligente!
                """)
                continue
            
            # Obtener respuesta del bot
            contador_mensajes += 1
            resultado = await bot.obtener_respuesta(mensaje, "usuario_consola")

            print(f"ü§ñ WORMGPT: {resultado['respuesta']}")
            # print(f"ü§ñ Alex: {resultado['respuesta']}") --- IGNORE ---
            if resultado['estado'] != 'success':
                print(f"‚ÑπÔ∏è  [Estado: {resultado['estado']}]")
                
            # Log para an√°lisis (sin mostrar contenido completo por privacidad)
            logging.info(f"Mensaje #{contador_mensajes} - Estado: {resultado['estado']}")
                
        except KeyboardInterrupt:
            print("\n\nüëã ¬°Hasta luego!")
            logging.info("Sesi√≥n interrumpida por usuario")
            break
        except Exception as e:
            print(f"‚ùå Error: {e}")
            logging.error(f"Error en chat_interactivo: {e}")

def verificar_entorno():
    """Verifica que el entorno est√© configurado correctamente"""
    print("üîç Verificando configuraci√≥n...")
    
    # Crear config para verificar si tiene API key
    config = BotConfig()
    if not config.gemini_api_key:
        print("‚ùå Falta GEMINI_API_KEY en variables de entorno")
        print("üí° Ejecuta: export GEMINI_API_KEY='tu_api_key_aqui'")
        return False
    
    print("‚úÖ Variables de entorno configuradas")
    return True

if __name__ == "__main__":
    print("üöÄ Iniciando WORMGPT...")
    print(f"‚è∞ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    if verificar_entorno():
        asyncio.run(chat_interactivo())
    else:
        print("‚ùå Configuraci√≥n incompleta. Revisa las instrucciones arriba.")